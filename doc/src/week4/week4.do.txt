TITLE: February 5-9, 2025: Quantum Computing, Quantum Machine Learning and Quantum Information Theories
AUTHOR: Morten Hjorth-Jensen {copyright, 1999-present|CC BY-NC} at Department of Physics, University of Oslo & Department of Physics and Astronomy and Facility for Rare Isotope Beams, Michigan State University, USA
DATE: February 7

February 5-9, 2024. Entanglement and entropies
  - Entanglement and Schmidt decomposition
  - Entropy as a measurement of	entanglement
  - Introduction to gates and calculations

!split
=====  Entanglement and density matrices =====

!bblock 
o Last week we discussed the spectral decomposition of an operator, Density matrices and Measurements. 
o This week we start by reviewing  density matrices and measurements from previous lecture, see URL:"https://github.com/CompPhysics/QuantumComputingMachineLearning/blob/gh-pages/doc/pub/week3/ipynb/week3.ipynb"
o Thereafter our plans are to discuss the Schmidt decomposition and entanglement
!eblock

* _Reading recommendation_: Scherer, Mathematics of Quantum Computations, chapter 4
* "See also whiteboard notes":"https://github.com/CompPhysics/QuantumComputingMachineLearning/tree/gh-pages/doc/HandWrittenNotes/2023/NotesFebruary13.pdf"

* "Video of lecture":"https://youtu.be/QVPQmeSAX8M"



In order to study entanglement and why it is so important for quantum
computing, we need to introduce some basic measures and useful
quantities.  For these endeavors, we  will use our two-qubit system from
the second lecture in order to introduce, through examples, density
matrices and entropy. These two quantities, together with
technicalities like the Schmidt decomposition define important quantities in analyzing quantum computing examples.

The Schmidt decomposition is again a
linear decompostions which allows us to express a vector in terms of
tensor product of two inner product spaces. In quantum information
theory and quantum computing it is widely used as away to define and
describe entanglement.


===== First entanglement encounter =====

=== Two-qubit system  ===

This system can be thought of as composed of two subsystems
$A$ and $B$. Each subsystem has computational basis states

!bt
\[
\vert 0\rangle_{\mathrm{A,B}}=\begin{bmatrix} 1 & 0\end{bmatrix}^T \hspace{1cm} \vert 1\rangle_{\mathrm{A,B}}=\begin{bmatrix} 0 & 1\end{bmatrix}^T.
\]
!et
The subsystems could represent single particles or composite many-particle systems of a given symmetry.
This leads to the many-body computational basis states

!bt
\[
\vert 00\rangle = \vert 0\rangle_{\mathrm{A}}\otimes \vert 0\rangle_{\mathrm{B}}=\begin{bmatrix} 1 & 0 & 0 &0\end{bmatrix}^T,
\]
!et
and
!bt
\[
\vert 01\rangle = \vert 0\rangle_{\mathrm{A}}\otimes \vert 1\rangle_{\mathrm{B}}=\begin{bmatrix} 0 & 1 & 0 &0\end{bmatrix}^T,
\]
!et
and
!bt
\[
\vert 10\rangle = \vert 1\rangle_{\mathrm{A}}\otimes \vert 0\rangle_{\mathrm{B}}=\begin{bmatrix} 0 & 0 & 1 &0\end{bmatrix}^T,
\]
!et
and finally
!bt
\[
\vert 11\rangle = \vert 1\rangle_{\mathrm{A}}\otimes \vert 1\rangle_{\mathrm{B}}=\begin{bmatrix} 0 & 0 & 0 &1\end{bmatrix}^T.
\]
!et



=== Bell states ===

The above computational basis states, which define an ONB, can in turn
be used to define another ONB. As an example, consider the so-called
Bell states

!bt
\[
\vert \Phi^+\rangle = \frac{1}{\sqrt{2}}\left[\vert 00\rangle +\vert 11\rangle\right]=\frac{1}{\sqrt{2}}\begin{bmatrix} 1 \\ 0 \\ 0 \\ 1\end{bmatrix},
\]
!et

!bt
\[
\vert \Phi^-\rangle = \frac{1}{\sqrt{2}}\left[\vert 00\rangle -\vert 11\rangle\right]=\frac{1}{\sqrt{2}}\begin{bmatrix} 1 \\ 0 \\ 0 \\ -1\end{bmatrix},
\]
!et

!bt
\[
\vert \Psi^+\rangle = \frac{1}{\sqrt{2}}\left[\vert 10\rangle +\vert 01\rangle\right]=\frac{1}{\sqrt{2}}\begin{bmatrix} 0 \\ 1 \\ 1 \\ 0\end{bmatrix},
\]
!et

and

!bt
\[
\vert \Psi^-\rangle = \frac{1}{\sqrt{2}}\left[\vert 10\rangle -\vert 01\rangle\right]=\frac{1}{\sqrt{2}}\begin{bmatrix} 0 \\ 1 \\ -1 \\ 0\end{bmatrix}.
\]
!et
It is easy to convince oneself that these states also form an orthonormal basis. 

Measuring one of the qubits of one of the above Bell states,
automatically determines, as we will see below, the state of the
second quabit. To convince ourselves about this, let us assume we perform a measurement on the qubit in system $A$ by introducing the projections with outcomes $0$ or $1$ as

!bt
\[
\bm{P}_0=\vert 0\rangle\langle 0\vert_A\otimes \bm{I}_B=\begin{bmatrix} 1 & 0\\ 0 & 0\end{bmatrix}\otimes\begin{bmatrix} 1& 0 \\ 0 & 1\end{bmatrix}=\begin{bmatrix} 1 & 0 & 0 & 0 \\ 0 & 1 & 0 & 0 \\ 0 & 0 & 0 & 0 \\ 0 & 0 & 0 & 0\end{bmatrix},
\]
!et
for the projection of the $\vert 0 \rangle$ state in system $A$ and similarly
!bt
\[
\bm{P}_1=\vert 1\rangle\langle 1\vert_A\otimes \bm{I}_B=\begin{bmatrix} 0 & 0\\ 0 & 1\end{bmatrix}\otimes\begin{bmatrix} 1& 0 \\ 0 & 1\end{bmatrix}=\begin{bmatrix} 0 & 0 & 0 & 0 \\ 0 & 0 & 0 & 0 \\ 0 & 0 & 1 & 0 \\ 0 & 0 & 0 & 1\end{bmatrix},
\]
!et
for the projection of the $\vert 1 \rangle$ state in system $A$.

We can then calculate the probability for the various outcomes by
computing for example the probability for measuring qubit $0$ 

!bt
\[
\langle \Phi^+\vert \bm{P}_0\vert \Phi^+\rangle = \frac{1}{2} \left[\langle 00\vert +\langle 11\vert\right]\begin{bmatrix} 1 & 0 & 0 & 0 \\ 0 & 1 & 0 & 0 \\ 0 & 0 & 0 & 0 \\ 0 & 0 & 0 & 0\end{bmatrix}\left[\vert 00\rangle +\vert 11\rangle\right]=\frac{1}{2}.
\]
!et
Similarly, we obtain
!bt
\[
\langle \Phi^+\vert \bm{P}_1\vert \Phi^+\rangle = \frac{1}{2}\left[\langle 00\vert +\langle 11\vert\right]\begin{bmatrix} 0 & 0 & 0 & 0 \\ 0 & 0 & 0 & 0 \\ 0 & 0 & 1 & 0 \\ 0 & 0 & 0 & 1\end{bmatrix}\left[\vert 00\rangle +\vert 11\rangle\right]=\frac{1}{2}.
\]
!et
After the above measurements the system is in the states

!bt
\[
\vert \Phi'_0 \rangle = \sqrt{2}\left[\vert 0\rangle\langle 0\vert_A\otimes \bm{I}_B\right]\vert\Phi^+\rangle=\vert 00\rangle,
\]
!et
and 
!bt
\[
\vert \Phi'_1 \rangle = \sqrt{2}\left[\vert 1\rangle\langle 1\vert_A\otimes \bm{I}_B\right]\vert\Phi^+\rangle=\vert 11\rangle.
\]
!et

We see from the last two equations that the state of the second qubit
is determined even though the measurement has only taken place locally
on system $A$.

If we on the other hand consider a state like

!bt
\[
\vert 00 \rangle = \vert 0\rangle_A\otimes \vert 0\rangle_B,
\]
!et
this is a pure product state of the single-qubit, or single-particle
states, of two qubits (particles) in system $A$ and system $B$,
respectively. We call such a state for a _pure state_.  Quantum states
that cannot be written as a mixture of other states are called pure
quantum states, while all other states are called mixed quantum states.

A state like one of the Bell states (where we introduce the subscript $AB$ to indicate that the state is composed of single states from two subsystem)
!bt
\[
\vert \Phi^+\rangle = \frac{1}{\sqrt{2}}\left[\vert 00\rangle_{AB} +\vert 11\rangle_{AB}\right],
\]
!et
is on the other hand a mixed state and we cannot determine whether system $A$ is in a state $0$ or $1$. The above state is a superpostion of the states $\vert 00\rangle_{AB}$ and $\vert 11\rangle_{AB}$ and it is not possible to determine individual states of systems $A$ and $B$, respectively.

We say that the state is entangled. This yields the following
definition of entangled states: a pure bipartite state $\vert
\psi\rangle_{AB}$ is entangled if it cannot be written as a product
state $\vert\psi\rangle_{A}\otimes\vert\phi\rangle_B$ for any choice
of the states $\vert\psi\rangle_{A}$ and $\vert\phi\rangle_B$. Otherwise we say the state is separable.

As an example, considere an ansatz for the ground state of the helium
atom with two electrons in the lowest $1s$ state (hydrogen-like
orbits) and with spin $s=1/2$ and spin projections $m_s=-1/2$ and
$m_s=1/2$.  The two single-particle states are given by the tensor
products of their spatial $1s$ single-particle states
$\vert\phi_{1s}\rangle$ and and their spin up or spin down spinors
$\vert\xi_{sm_s}\rangle$. The ansatz for the ground state is given by a Slater
determinant with total orbital momentum $L=l_1+l_2=0$ and totalt spin
$S=s_1+s_2=0$, normally labeled as a spin-singlet state. This ansatz
for the ground state is then written as, using the compact notations
!bt
\[
\vert \psi_{i}\rangle = \vert\phi_{1s}\rangle_i\otimes \vert \xi\rangle_{s_im_{s_i}}=\vert 1s,s,m_s\rangle_i,  \]
!et
with $i$ being electron $1$ or $2$, and the tensor product of the two single-electron states as
$\vert 1s,s,m_s\rangle_1\vert 1s,s,m_s\rangle_2=\vert 1s,s,m_s\rangle_1\otimes \vert 1s,s,m_s\rangle_2$, we arrive at
!bt
\[
\Psi(\bm{r}_1,\bm{r}_2;s_1,s_2)=\frac{1}{\sqrt{2}}\left[\vert 1s,1/2,1/2\rangle_1\vert 1s,1/2,-1/2\rangle_2-\vert 1s,1/2,-1/2\rangle_1\vert 1s,1/2,1/2\rangle_2\right].
\]
!et
This is also an example of a state which cannot be written out as a pure state. We call this for an entangled state as well.


A so-called maximally entangled state for a bipartite system has equal  probability amplitudes
!bt
\[
\vert \Psi \rangle = \frac{1}{\sqrt{d}}\sum_{i=0}^{d-1}\vert ii\rangle.
\]
!et

We call a bipartite state composed of systems $A$ and $B$ (these
systems can be single-particle systems, or single-qubit systems
representing low-lying states of complicated many-body systems) for
separable if its density matrix $\rho_{AB}$ can be written out as the
tensor product of the individual density matrices $\rho_A$ and
$\rho_B$, that is we have for a given probability distribution $p_i$

!bt
\[
\rho_{AB}=\sum_ip_i\rho_A(i)\otimes \rho_B(i).
\]
!et

If we cannot write the density matrix in this form, we say the system
$AB$ is entangled. In order to see this, we can use the so-called
Schmidt decomposition, which is essentially an application of the
singular-value decomposition.

The Schmidt decomposition allows us to define a pure state in a
bipartite Hilbert space composed of systems $A$ and $B$ as

!bt
\[
\vert\psi\rangle=\sum_{i=0}^{d-1}\sigma_i\vert i\rangle_A\vert i\rangle_B,
\]
!et
where the ampltitudes $\sigma_i$ are real and positive and their
squared values sum up to one, $\sum_i\sigma_i^2=1$. The states $\vert
i\rangle_A$ and $\vert i\rangle_B$ form orthornormal bases for systems
$A$ and $B$ respectively, the amplitudes $\lambda_i$ are the so-called
Schmidt coefficients and the Schmidt rank $d$ is equal to the number
of Schmidt coefficients and is smaller or equal to the minimum
dimensionality of system $A$ and system $B$, that is $d\leq
\mathrm{min}(\mathrm{dim}(A), \mathrm{dim}(B))$.

The proof for the above decomposition is based on the singular-value decomposition. To see this, assume that we have two orthonormal bases sets for systems $A$ and $B$, respectively. That is we have two ONBs $\vert i\rangle_A$ and $\vert j\rangle_B$. We can always construct a product state (a pure state) as

!bt
\[
\vert\psi \rangle = \sum_{ij} c_{ij}\vert i\rangle_A\vert j\rangle_B,
\]
!et
where the coefficients $c_{ij}$ are the overlap coefficients which belong to a matrix $\bm{C}$. If we now assume that the dimensionalities of the two subsystems $A$ and $B$ are the same $d$, we can always rewrite the matrix $\bm{C}$ in terms of a singular-value decomposition with unitary/orthogonal matrices $\bm{U}$ and $\bm{V}$ of dimension $d\times d$ and a matrix $\bm{\Sigma}$ which contains the (diagonal) singular values $\sigma_0\leq \sigma_1 \leq \dots 0$ as

!bt
\[
\bm{C}=\bm{U}\bm{\Sigma}\bm{V}^{\dagger}.
\]
!et
This means we can rewrite the coefficients $c_{ij}$ in terms of the singular-value decomposition
!bt
\[
c_{ij}=\sum_k u_{ik}\sigma_kv_{kj},
\]
!et
and inserting this in the definition of the pure state $\vert \psi\rangle$ we have

!bt
\[
\vert\psi \rangle = \sum_{ij} \left(\sum_k u_{ik}\sigma_kv_{kj} \right)\vert i\rangle_A\vert j\rangle_B,
\]
!et
which we rewrite as

!bt
\[
\vert\psi \rangle = \sum_{k}\sigma_k \left(\sum_i u_{ik}\vert i\rangle_A\right)\otimes\left(\sum_jv_{kj}\vert j\rangle_B\right),
\]
!et
which we identify simply as, since the matrices $\bm{U}$ and $\bm{V}$ represent unitary transformations,
!bt
\[
\vert\psi \rangle = \sum_{k}\sigma_k \vert k\rangle_A\vert k\rangle_B.
\]
!et
It is straight forward to prove this relation in case systems $A$ and $B$ have different dimensionalities.
Once we know the Schmidt decomposition of a state, we can immmediately say whether it is entangled or not. If a state $\psi$ has is entangled, then its Schmidt decomposition has more than one term. Stated differently, the state is entangled if the so-called Schmidt rank is is greater than one.
There is another important property of the Schmidt decomposition which is related to the properties of the density matrices and their trace operations and the entropies. In order to introduce these concepts let us look at the two-qubit Hamiltonian described here.


===== Density matrix and simple Hamiltonian =====

These computational basis
states define also the eigenstates of the non-interacting Hamiltonian

!bt
\[
H_0\vert 00 \rangle = \epsilon_{00}\vert 00 \rangle,
\]
!et
!bt
\[
H_0\vert 10 \rangle = \epsilon_{10}\vert 10 \rangle,
\]
!et
!bt
\[
H_0\vert 01 \rangle = \epsilon_{01}\vert 01 \rangle,
\]
!et
and
!bt
\[
H_0\vert 11 \rangle = \epsilon_{11}\vert 11 \rangle.
\]
!et
The interacting part of the Hamiltonian $H_{\mathrm{I}}$ is given by the tensor product of two $\sigma_x$ and $\sigma_z$  matrices, respectively, that is
!bt
\[
H_{\mathrm{I}}=H_x\sigma_x\otimes\sigma_x+H_z\sigma_z\otimes\sigma_z,
\]
!et
where $H_x$ and $H_z$ are interaction strength parameters. Our final Hamiltonian matrix is given by
!bt
\[
\bm{H}=\begin{bmatrix} \epsilon_{00}+H_z & 0 & 0 & H_x \\
                       0  & \epsilon_{10}-H_z & H_x & 0 \\
		       0 & H_x & \epsilon_{01}-H_z & 0 \\
		       H_x & 0 & 0 & \epsilon_{11} +H_z \end{bmatrix}.
\] 
!et

The four eigenstates of the above Hamiltonian matrix can in turn be used to
define density matrices. As an example, the density matrix of the
first eigenstate (lowest energy $E_0$) $\Psi_0$ is

!bt
\[
\rho_0=\left(\alpha_{00}\vert 00 \rangle\langle 00\vert+\alpha_{10}\vert 10 \rangle\langle 10\vert+\alpha_{01}\vert 01 \rangle\langle 01\vert+\alpha_{11}\vert 11 \rangle\langle 11\vert\right),
\]
!et

where the coefficients $\alpha_{ij}$ are the eigenvector coefficients
resulting from the solution of the above eigenvalue problem.



We can
then in turn define the density matrix for the subsets $A$ or $B$ as

!bt
\[
\rho_A=\mathrm{Tr}_B(\rho_{0})=\langle 0 \vert \rho_{0} \vert 0\rangle_{B}+\langle 1 \vert \rho_{0} \vert 1\rangle_{B},
\]
!et

or

!bt
\[
\rho_B=\mathrm{Tr}_A(\rho_0)=\langle 0 \vert \rho_{0} \vert 0\rangle_{A}+\langle 1 \vert \rho_{0} \vert 1\rangle_{A}.
\]
!et

The density matrices for these subsets can be used to compute the
so-called von Neumann entropy, which is one of the possible measures
of entanglement. A pure state has entropy equal zero while entangled
state have an entropy larger than zero. The von-Neumann entropy is
defined as

!bt
\[
S(A,B)=-\mathrm{Tr}\left(\rho_{A,B}\log_2 (\rho_{A,B})\right).
\]
!et

The example here shows the above von Neumann entropy based on the
density matrix for the lowest many-body state. We see clearly a jump
in the entropy around the point where we have a level crossing. At
interaction strenght $\lambda=0$ we have many-body states purely
defined by their computational basis states. As we switch on the
interaction strength, we obtain an increased degree of mixing and the
entropy increases till we reach the level crossing point where we see
an additional and sudden increase in entropy. Similar behaviors are
observed for the other states. The most important result from this
example is that entanglement is driven by the Hamiltonian itself and
the strength of the interaction matrix elements and the
non-interacting energies.

!bc pycod
%matplotlib inline
from  matplotlib import pyplot as plt
import numpy as np
from scipy.linalg import logm, expm
def log2M(a): # base 2 matrix logarithm
    return logm(a)/np.log(2.0)

dim = 4
Hamiltonian = np.zeros((dim,dim))
#number of lambda values
n = 40
lmbd = np.linspace(0.0,1.0,n)
Hx = 2.0
Hz = 3.0
# Non-diagonal part as sigma_x tensor product with sigma_x
sx = np.matrix([[0,1],[1,0]])
sx2 = Hx*np.kron(sx, sx)
# Diagonal part as sigma_z tensor product with sigma_z
sz = np.matrix([[1,0],[0,-1]])
sz2 = Hz*np.kron(sz, sz)
noninteracting = [0.0, 2.5, 6.5, 7.0]
D = np.diag(noninteracting)
Eigenvalue = np.zeros((dim,n))
Entropy = np.zeros(n)

for i in range(n): 
    Hamiltonian = lmbd[i]*(sx2+sz2)+D
    # diagonalize and obtain eigenvalues, not necessarily sorted
    EigValues, EigVectors = np.linalg.eig(Hamiltonian)
    # sort eigenvectors and eigenvalues
    permute = EigValues.argsort()
    EigValues = EigValues[permute]
    EigVectors = EigVectors[:,permute]
    # Compute density matrix for selected system state, here ground state
    DensityMatrix = np.zeros((dim,dim))
    DensityMatrix = np.outer(EigVectors[:,0],EigVectors[:,0])
    # Project down on substates and find density matrix for subsystem
    d = np.matrix([[1,0],[0,1]])
    v1 = [1.0,0.0]
    proj1 = np.kron(v1,d)
    x1 = proj1 @ DensityMatrix @ proj1.T
    v2 = [0.0,1.0]
    proj2 = np.kron(v2,d)
    x2 = proj2 @ DensityMatrix @ proj2.T
    # Total density matrix for subsystem
    total = x1+x2
    # von Neumann Entropy for subsystem 
    Entropy[i] = -np.matrix.trace(total @ log2M(total))
    # Plotting eigenvalues and entropy as functions of interaction strengths
    Eigenvalue[0,i] = EigValues[0]
    Eigenvalue[1,i] = EigValues[1]
    Eigenvalue[2,i] = EigValues[2]
    Eigenvalue[3,i] = EigValues[3]
plt.plot(lmbd, Eigenvalue[0,:] ,'b-',lmbd, Eigenvalue[1,:],'g-',)
plt.plot(lmbd, Eigenvalue[2,:] ,'r-',lmbd, Eigenvalue[3,:],'y-',)
plt.xlabel('$\lambda$')
plt.ylabel('Eigenvalues')
plt.show()
plt.plot(lmbd, Entropy)
plt.xlabel('$\lambda$')
plt.ylabel('Entropy')          
plt.show
!ec




!bblock Lecture next week
o More on Density natrices and traces
o Entanglement and entropies
!eblock

TITLE: February 20-24,2023: Quantum Computing, Quantum Machine Learning and Quantum Information Theories
AUTHOR: Morten Hjorth-Jensen {copyright, 1999-present|CC BY-NC} at Department of Physics, University of Oslo & Department of Physics and Astronomy and National Superconducting Cyclotron Laboratory, Michigan State University
DATE: today

!split
===== Entanglement and Entropy  =====

!bblock 
o Review of Schmidt decomposition and entanglement from last week, see jupyter-notebook at URL:"https://github.com/CompPhysics/QuantumComputingMachineLearning/blob/gh-pages/doc/pub/week4/ipynb/week4.ipynb"
o More on entanglement
o Entropy and traces of density matrices
_Reading recommendation_: Scherer, Mathematics of Quantum Computations, section 2.3 and chapter 4  
!eblock

* "Video of lecture":"https://youtu.be/gnlGUjKGDts"
* "See also whiteboard notes":"https://github.com/CompPhysics/QuantumComputingMachineLearning/tree/gh-pages/doc/HandWrittenNotes/2023/NotesFebruary20.pdf"


===== Density matrices and traces =====

In order to study entanglement and why it is so important for quantum
computing, we need to introduce some basic measures and useful
quantities.  For these endeavors, we  will use our two-qubit system from
the second lecture in order to introduce, through examples, density
matrices and entropy. These two quantities, together with
technicalities like the Schmidt decomposition define important quantities in analyzing quantum computing examples.

=== Reminder on density matrices ===

We have the spectral decomposition of a given operator $\bm{A}$ given by

!bt
\[
\bm{A}=\sum_i\lambda_i\vert i \rangle\langle i\vert,
\]
!et
with the ONB $\vert i\rangle$ being eigenvectors of $\bm{A}$ and $\lambda_i$ being the eigenvectors. Similarly, a operator which is a function of $\bm{A}$ is given by
!bt
\[
f(\bm{A})=\sum_if(\bm{A})\vert i \rangle\langle i\vert.
\]
!et
The trace of a product of matrices is cyclic, that is
!bt
\[
\mathrm{tr}[\bm{ABC}])=\mathrm{tr}[\bm{BCA}])=\mathrm{tr}[\bm{CBA}]),
\]
!et
and we have also 
!bt
\[
\mathrm{tr}[\bm{A}\vert \psi\rangle\langle\psi\vert])=\langle\psi\vert\bm{A}\vert\psi\rangle.
\]
!et

Using the spectral decomposition we defined also the density matrix as
!bt
\[
\rho = \sum_i p_i\vert i \rangle\langle i\vert,
\]
!et
where the probability $p_i$ are the eigenvalues of the density linked with the ONB $\vert i \rangle$.

The trace of the density matrix $\mathrm{tr}\rho=1$ and is invariant under unitary transformations
$\vert \psi_i'\rangle = \bm{U}\vert \psi_i\rangle$. The unitary transformation of the density matrix gives, with
$\bm{U}^{\dagger}\bm{U}=\bm{U}^{T}\bm{U}=\bm{I}$,
!bt
\[
\bm{U}\rho\bm{U}^{\dagger}}=\sum_ipi_i\bm{U}\vert \psi_i\rangle\langle\psi_i\vert\bm{U}^{\dagger},
\]
!et
and with the unitary transformation it is easy to show that thet trace of the transformaed density matrix is equal to one,
!bt
\[
\mathrm{tr}\left[ \bm{U}\rho\bm{U}^{\dagger}\right]=\mathrm{tr}\left[ \bm{U}\bm{U}^{\dagger}\rho\right]=1.
\]
!et



=== Two-qubit system and definition of density matrices  ===

This system can be thought of as composed of two subsystems
$A$ and $B$. Each subsystem has computational basis states

!bt
\[
\vert 0\rangle_{\mathrm{A,B}}=\begin{bmatrix} 1 & 0\end{bmatrix}^T \hspace{1cm} \vert 1\rangle_{\mathrm{A,B}}=\begin{bmatrix} 0 & 1\end{bmatrix}^T.
\]
!et
The subsystems could represent single particles or composite many-particle systems of a given symmetry.
This leads to the many-body computational basis states

!bt
\[
\vert 00\rangle = \vert 0\rangle_{\mathrm{A}}\otimes \vert 0\rangle_{\mathrm{B}}=\begin{bmatrix} 1 & 0 & 0 &0\end{bmatrix}^T,
\]
!et
and
!bt
\[
\vert 01\rangle = \vert 0\rangle_{\mathrm{A}}\otimes \vert 1\rangle_{\mathrm{B}}=\begin{bmatrix} 0 & 1 & 0 &0\end{bmatrix}^T,
\]
!et
and
!bt
\[
\vert 10\rangle = \vert 1\rangle_{\mathrm{A}}\otimes \vert 0\rangle_{\mathrm{B}}=\begin{bmatrix} 0 & 0 & 1 &0\end{bmatrix}^T,
\]
!et
and finally
!bt
\[
\vert 11\rangle = \vert 1\rangle_{\mathrm{A}}\otimes \vert 1\rangle_{\mathrm{B}}=\begin{bmatrix} 0 & 0 & 0 &1\end{bmatrix}^T.
\]
!et

These computational basis states define also the eigenstates of the non-interacting  Hamiltonian
!bt
\[
H_0\vert 00 \rangle = \epsilon_{00}\vert 00 \rangle,
\]
!et
!bt
\[
H_0\vert 10 \rangle = \epsilon_{10}\vert 10 \rangle,
\]
!et
!bt
\[
H_0\vert 01 \rangle = \epsilon_{01}\vert 01 \rangle,
\]
!et
and
!bt
\[
H_0\vert 11 \rangle = \epsilon_{11}\vert 11 \rangle.
\]
!et
The interacting part of the Hamiltonian $H_{\mathrm{I}}$ is given by the tensor product of two $\sigma_x$ and $\sigma_z$  matrices, respectively, that is
!bt
\[
H_{\mathrm{I}}=H_x\sigma_x\otimes\sigma_x+H_z\sigma_z\otimes\sigma_z,
\]
!et
where $H_x$ and $H_z$ are interaction strength parameters. Our final Hamiltonian matrix is given by
!bt
\[
\bm{H}=\begin{bmatrix} \epsilon_{00}+H_z & 0 & 0 & H_x \\
                       0  & \epsilon_{10}-H_z & H_x & 0 \\
		       0 & H_x & \epsilon_{01}-H_z & 0 \\
		       H_x & 0 & 0 & \epsilon_{11} +H_z \end{bmatrix}.
\] 
!et

The four eigenstates of the above Hamiltonian matrix can in turn be used to
define density matrices. As an example, the density matrix of the
first eigenstate (lowest energy $E_0$) $\Psi_0$ is

!bt
\[
\rho_0=\left(\alpha_{00}\vert 00 \rangle\langle 00\vert+\alpha_{10}\vert 10 \rangle\langle 10\vert+\alpha_{01}\vert 01 \rangle\langle 01\vert+\alpha_{11}\vert 11 \rangle\langle 11\vert\right),
\]
!et

where the coefficients $\alpha_{ij}$ are the eigenvector coefficients
resulting from the solution of the above eigenvalue problem.


We can
then in turn define the density matrix for the subsets $A$ or $B$ as

!bt
\[
\rho_A=\mathrm{Tr}_B(\rho_{0})=\langle 0 \vert \rho_{0} \vert 0\rangle_{B}+\langle 1 \vert \rho_{0} \vert 1\rangle_{B},
\]
!et

or

!bt
\[
\rho_B=\mathrm{Tr}_A(\rho_0)=\langle 0 \vert \rho_{0} \vert 0\rangle_{A}+\langle 1 \vert \rho_{0} \vert 1\rangle_{A}.
\]
!et

The density matrices for these subsets can be used to compute the
so-called von Neumann entropy, which is one of the possible measures
of entanglement. A pure state has entropy equal zero while entangled
state have an entropy larger than zero. The von-Neumann entropy is
defined as

!bt
\[
S(A,B)=-\mathrm{Tr}\left(\rho_{A,B}\log_2 (\rho_{A,B})\right).
\]
!et

The example here shows the above von Neumann entropy based on the
density matrix for the lowest many-body state. We see clearly a jump
in the entropy around the point where we have a level crossing. At
interaction strenght $\lambda=0$ we have many-body states purely
defined by their computational basis states. As we switch on the
interaction strength, we obtain an increased degree of mixing and the
entropy increases till we reach the level crossing point where we see
an additional and sudden increase in entropy. Similar behaviors are
observed for the other states. The most important result from this
example is that entanglement is driven by the Hamiltonian itself and
the strength of the interaction matrix elements and the
non-interacting energies.

!bc pycod
%matplotlib inline
from  matplotlib import pyplot as plt
import numpy as np
from scipy.linalg import logm, expm
def log2M(a): # base 2 matrix logarithm
    return logm(a)/np.log(2.0)

dim = 4
Hamiltonian = np.zeros((dim,dim))
#number of lambda values
n = 40
lmbd = np.linspace(0.0,1.0,n)
Hx = 2.0
Hz = 3.0
# Non-diagonal part as sigma_x tensor product with sigma_x
sx = np.matrix([[0,1],[1,0]])
sx2 = Hx*np.kron(sx, sx)
# Diagonal part as sigma_z tensor product with sigma_z
sz = np.matrix([[1,0],[0,-1]])
sz2 = Hz*np.kron(sz, sz)
noninteracting = [0.0, 2.5, 6.5, 7.0]
D = np.diag(noninteracting)
Eigenvalue = np.zeros((dim,n))
Entropy = np.zeros(n)

for i in range(n): 
    Hamiltonian = lmbd[i]*(sx2+sz2)+D
    # diagonalize and obtain eigenvalues, not necessarily sorted
    EigValues, EigVectors = np.linalg.eig(Hamiltonian)
    # sort eigenvectors and eigenvalues
    permute = EigValues.argsort()
    EigValues = EigValues[permute]
    EigVectors = EigVectors[:,permute]
    # Compute density matrix for selected system state, here ground state
    DensityMatrix = np.zeros((dim,dim))
    DensityMatrix = np.outer(EigVectors[:,0],EigVectors[:,0])
    # Project down on substates and find density matrix for subsystem
    d = np.matrix([[1,0],[0,1]])
    v1 = [1.0,0.0]
    proj1 = np.kron(v1,d)
    x1 = proj1 @ DensityMatrix @ proj1.T
    v2 = [0.0,1.0]
    proj2 = np.kron(v2,d)
    x2 = proj2 @ DensityMatrix @ proj2.T
    # Total density matrix for subsystem
    total = x1+x2
    # von Neumann Entropy for subsystem 
    Entropy[i] = -np.matrix.trace(total @ log2M(total))
    # Plotting eigenvalues and entropy as functions of interaction strengths
    Eigenvalue[0,i] = EigValues[0]
    Eigenvalue[1,i] = EigValues[1]
    Eigenvalue[2,i] = EigValues[2]
    Eigenvalue[3,i] = EigValues[3]
plt.plot(lmbd, Eigenvalue[0,:] ,'b-',lmbd, Eigenvalue[1,:],'g-',)
plt.plot(lmbd, Eigenvalue[2,:] ,'r-',lmbd, Eigenvalue[3,:],'y-',)
plt.xlabel('$\lambda$')
plt.ylabel('Eigenvalues')
plt.show()
plt.plot(lmbd, Entropy)
plt.xlabel('$\lambda$')
plt.ylabel('Entropy')          
plt.show
!ec





===== Entropies and density matrices =====

"See whiteboard notes":"https://github.com/CompPhysics/QuantumComputingMachineLearning/tree/gh-pages/doc/HandWrittenNotes/2023/NotesFebruary20.pdf"

=== Shannon information entropy ===

We start our discussions with the classical information entropy, or
just Shannon entropy, before we move over to a quantum mechanical way
to define the entropy based on the density matrices discussed earlier.

We define a set of random variables $X=\{x_0,x_1,\dots,x_{n-1}\}$ with probability for an outcome $x\in X$ given by $p_X(x)$, the
information entropy is defined as
!bt
\[
S=-\sum_{x\in X}p_X(x)\log_2{p_X(x)}.
\]
!et

=== Von Neumann entropy ===

!bt
\[
S=-\mathrm{Tr}[\rho\log_2{\rho}].
\]
!et




===== Quantum gates, circuits and simple algorithms =====


Quantum gates are physical actions that are applied to the physical
system representing the qubits. Mathematically, they are
complex-valued, unitary matrices which act on the complex-values
normalized vectors that represent qubits. As the quantum analog of
classical logic gates (such as AND and OR), there is a corresponding
quantum gate for every classical gate; however, there are quantum
gates that have no classical counter-part. They act on a set of qubits
and, changing their state. That is, if $U$ is a quantum gate and
$\vert q \rangle $ is a qubit, then acting the gate $U$ on the qubit $\vert q \rangle $
transforms the qubit as follows:

!bt
\begin{align}
\vert q \rangle \overset{U}{\to}U\vert q \rangle 
.\end{align}
!et

This action would be represented as the following quantum circuit

!bt
\begin{align}
label{simple_qc}
\Qcircuit
{
\lstick{\vert q \rangle } & \gate{U} & \rstick{U\vert q \rangle } \qw 
}
\end{align}
!et

Quantum circuits are diagrammatic representations of quantum
algorithms. The horizontal dimension corresponds to time; moving left
to right corresponds to forward motion in time. They consist of a set
of qubits $\vert q_n\rangle$ which are stacked vertically on the left-hand
side of the diagram. Lines, called quantum wires, extend horizontally
to the right from each qubit, representing its state moving forward in
time. Additionally, they contain a set of quantum gates that are
applied to the quantum wires. Gates are applied chronologically, left
to right. With this, we can see that the quantum circuit above
(ref{simple_qc}) implies that the quantum gate $U$ is being applied
to the qubit in state $\vert q \rangle$.

To explain what quantum circuits represent mathematically, consider the following circuit

!bt
\begin{align}
label{simple_qce}
\Qcircuit @C=1em @R=1em
{
\lstick{\vert q_0 \rangle } & \gate{A} & \gate{B} & \qw 
\\
\lstick{\vert q_1 \rangle } & \gate{C} & \gate{D} & \qw 
}
\end{align}
!et
This circuit implies the following mathematical statement
!bt
\begin{align}
\vert q_0q_1\rangle
&\to
(B\otimes D)(A\otimes C)\vert q_0q_1\rangle
\\
&\to
(BA)\otimes(DC)\vert q_0q_1\rangle
\\
&\to 
BA\vert q_0 \rangle DC\vert q_1 \rangle 
.\end{align}
!et


Note that the mathematical form is in reverse order from circuit form
($AB\leftrightarrow BA$). This is because the operator closest to the
state (furthest to the right) acts first. Additionally, we are able to
write the actions of the top two gates and the bottom two as acting
separately on each qubit as every gate here is a single-qubit gate
(acting on only one qubit). The same would not be true for certain
two-qubit gates which would entangle the states of the two qubits, not
allowing their state to be written in a separable form. Finally, we
define the depth of a quantum circuit as the number of columns of
gates. The circuit above thus has a depth of 2 because it contains two
columns of gates, namely $A\otimes C$ and $B\otimes D$.

=== Single-Qubit Gates ===

A single-qubit gate is a physical action that is applied to one qubit. It can be represented by a matrix $U$ from the group SU(2). Any single-qubit gate can be parameterized by three angles: $\theta$, $\phi$, and $\lambda$ as follows

!bt
\begin{align}
label{U}
U(\theta,\phi,\lambda)
=
\begin{pmatrix}
\cos\frac{\theta}{2} & -e^{i\lambda}\sin\frac{\theta}{2}
\\
e^{i\phi}\sin\frac{\theta}{2} & e^{i(\phi+\lambda)}\cos\frac{\theta}{2}
\end{pmatrix}
.\end{align}
!et

There are several widely used quantum gates, include the following:
The Pauli gates correspond to the Pauli matrices

!bt
\begin{align}
I
&=
\begin{pmatrix}
1 & 0 \\
0 & 1
\end{pmatrix}
\\
X
&=
\begin{pmatrix}
0 & 1 \\
1 & 0
\end{pmatrix}
\\
Y
&=
\begin{pmatrix}
0 & -i \\
i & 0
\end{pmatrix}
\\
Z
&=
\begin{pmatrix}
1 & 0 \\
0 & -1
\end{pmatrix}
,\end{align}
!et

which satisfy the relation

!bt
\begin{align}
\comm{\sigma}{\tau}=i\epsilon_{\sigma\tau\upsilon}\upsilon
,\end{align}
!et

for $\sigma,\tau,\upsilon\in\{X,Y,Z\}$. These gates form a basis for
the algebra $\mathfrak{su}(2)$. Exponentiating them will thus give us
a basis for SU(2), the group within which all single-qubit gates
live. These exponentiated Pauli gates are called rotation gates
$R_{\sigma}(\theta)$ because they rotate the quantum state around the
axis $\sigma=X,Y,Z$ of the Bloch sphere by an angle $\theta$. They are
defined as

!bt
\begin{align}
R_X(\theta)
&=
e^{-i\frac{\theta}{2}X}
=
\begin{pmatrix}
\cos\frac{\theta}{2} & -i\sin\frac{\theta}{2} \\
-i\sin\frac{\theta}{2} & \cos\frac{\theta}{2} 
\end{pmatrix},
\\
R_Y(\theta)
&=
e^{-i\frac{\theta}{2}Y}
=
\begin{pmatrix}
\cos\frac{\theta}{2} & -\sin\frac{\theta}{2} \\
\sin\frac{\theta}{2} & \cos\frac{\theta}{2} 
\end{pmatrix},
\\
R_Z(\theta)
&=
e^{-i\frac{\theta}{2}Z}
=
\begin{pmatrix}
e^{-i\theta/2} & 0 \\
0 & e^{i\theta/2}
\end{pmatrix}
.\end{align}
!et

Because they form a basis for $\text{SU}(2)$, any single-qubit gate can be decomposed into three rotation gates. Indeed

!bt
\begin{align}
R_z(\phi)R_y(\theta)R_z(\lambda)
&=
\begin{pmatrix}
e^{-i\phi/2} & 0 \\
0 & e^{i\phi/2}
\end{pmatrix}
\begin{pmatrix}
\cos\frac{\theta}{2} & -\sin\frac{\theta}{2} \\
\sin\frac{\theta}{2} & \cos\frac{\theta}{2} 
\end{pmatrix}
\begin{pmatrix}
e^{-i\lambda/2} & 0 \\
0 & e^{i\lambda/2}
\end{pmatrix}
\\
&=
e^{-i(\phi+\lambda)/2}
\begin{pmatrix}
\cos\frac{\theta}{2} & -e^{i\lambda}\sin\frac{\theta}{2}
\\
e^{i\phi}\sin\frac{\theta}{2} & e^{i(\phi+\lambda)}\cos\frac{\theta}{2}
\end{pmatrix}
,\end{align}
!et

which is, up to a global phase, equal to the expression for an arbitrary single-qubit gate (ref{U}).

=== Two-Qubit Gates ===

A two-qubit gate is a physical action that is applied to two
qubits. It can be represented by a matrix $U$ from the group
SU(4). One important type of two-qubit gates are controlled gates,
which work as follows: Suppose $U$ is a single-qubit gate. A
controlled-$U$ gate ($CU$) acts on two qubits: a control qubit
$\vert x \rangle $ and a target qubit $\vert y \rangle $. The controlled-$U$ gate
applies the identity $I$ or the single-qubit gate $U$ to the target
qubit if the control gate is in the zero state $\ket{0}$ or the one
state $\ket{1}$, respectively. The control qubit is not acted
upon. This can be represented as follows:

!bt
\begin{align}
CU\ket{xy}=
\begin{cases}
\ket{xy} & \text{if} \ \vert x \rangle =\ket{0}
\\
\vert x \rangle U\vert y \rangle  & \text{if} \ \vert x \rangle =\ket{1}
\end{cases}
.\end{align}
!et
The action of a controlled-$U$ gate $CU$ can be represented in a quantum circuit as follows

!bt
\begin{align}
\Qcircuit @C=1em @R=3em 
{
\lstick{\vert x \rangle } & \ctrl{1} & \rstick{\vert x \rangle } \qw
\\
\lstick{\vert y \rangle } & \gate{U} & \rstick{\begin{cases}\vert y \rangle , & \vert x \rangle =\ket{0} \\ U\vert y \rangle , & \ket{a}=\vert x \rangle \end{cases}} \qw
}
\\
\nonumber
\end{align}
!et


It can be written in matrix form by writing it as a superposition of
the two possible cases, each written as a simple tensor product

!bt
\begin{align}
CU 
&= \ket{0}\bra{0}\otimes I + \ket{1}\bra{1}\otimes U
\\
&=\begin{pmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & u_{00} & u_{01} \\
0 & 0 & u_{10} & u_{11}
\end{pmatrix}
.\end{align}
!et

One of the most fundamental controlled gates is the CNOT gate. It is
defined as the controlled-$X$ gate $CX$ and thus flips the state of
the target qubit if the control qubit is in the zero state
$\ket{0}$. It can be written in matrix form as follows:

!bt
\begin{align}
\text{CNOT}
=\begin{pmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 0 & 1 \\
0 & 0 & 1 & 0
\end{pmatrix}
.\end{align}
!et

A widely used two-qubit gate that goes beyond the simple controlled function is the SWAP gate. It swaps the states of the two qubits it acts upon

!bt
\begin{align}
\text{SWAP}\ket{xy}=\ket{yx}
,\end{align}
as depicted in the quantum circuit below
\begin{align}
label{swap_def}
\Qcircuit
{
\lstick{\vert x \rangle } & \qswap      & \rstick{\vert y \rangle } \qw
\\
\lstick{\vert y \rangle } & \qswap \qwx & \rstick{\vert x \rangle } \qw
}
,\end{align}
!et
and has the following matrix form

!bt
\begin{align}
\text{SWAP}
=\begin{pmatrix}
1 & 0 & 0 & 0 \\
0 & 0 & 1 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 0 & 1
\end{pmatrix}
.\end{align}
!et

It can be decomposed into a series of three CNOTs, each of which has its directionality flipped from the previous
!bt
\begin{align}
\Qcircuit
{
\lstick{\vert x \rangle } & \ctrl{1} & \targ     & \ctrl{1} & \rstick{\vert y \rangle } \qw
\\
\lstick{\vert y \rangle } & \targ    & \ctrl{-1} & \targ    & \rstick{\vert x \rangle } \qw
}
\end{align}
!et


As for arbitrary two-qubit gates $U\in\text{SU(4)}$, they can be
optimally decomposed (up to a global phase) into the following
sequence \cite{ref:kak} involving three parameters, fifteen elementary
one-qubit gates and three CNOT gates

!bt
\begin{align}
\Qcircuit
{
\qw & \gate{U_1} & \ctrl{1} & \gate{R_y(\theta_1)} & \targ      & \gate{R_y(\theta_2)} & \ctrl{1} & \gate{U_3} & \qw
\\
\qw & \gate{U_2} & \targ    & \gate{R_z(\theta_3)} & \ctrl{-1} & \qw                  & \targ     & \gate{U_4} & \qw
}
\end{align}
!et

where $U_1,U_2,U_3,U_4$ are single-qubit gates, each of which can be
decomposed into three elementary one-qubit gates (rotation
gates). Additionally, $\theta_1,\theta_2,\theta_3$ are parameters to
be determined by the arbitrary two-qubit gate to be
decomposed. Two-qubit gates that are restricted to $U\in\text{SO(4)}$
can be decomposed into a shorter depth circuit consisting of just
twelve elementary single-qubit gates and two CNOT gates

!bt
\begin{align}
\Qcircuit
{
\qw & \gate{R_z(\pi/2)} & \gate{R_y(\pi/2)} & \ctrl{1} & \gate{U_1} & \ctrl{1} & \gate{R^*_y(\pi/2)} & \gate{R^*_z(\pi/2)} & \qw
\\
\qw & \gate{R_z(\pi/2)} & \qw               & \targ    & \gate{U_2} & \targ    & \qw                 & \gate{R^*_z(\pi/2)} & \qw
}
\end{align}
!et

!bblock Lecture next week we discuss algorithms for solving quantum mechanical problems, quantum gates and circuits 
  o Introduction to "Qiskit":"https://qiskit.org/"
  o Defining one-, two-	and three-qubit	gates
  o Setting up quantum circuits	and simple algorithms
  o VQE, Variational Quantum Eigensolver
  o Introduction of Hamiltonians to study, the Lipkin model
!eblock





