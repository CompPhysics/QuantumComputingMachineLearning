TITLE: January 30-February 3,2023: Composite systems, Tensor products and Hamiltonians
AUTHOR: Morten Hjorth-Jensen {copyright, 1999-present|CC BY-NC} at Department of Physics, University of Oslo, Norway & Department of Physics and Astronomy and Facility for Rare Isotope Beams, Michigan State University, USA
DATE: today








===== Summary from last week and plans for this week =====

!bblock  Last week we:
o defined the state vector and the associated notation
o introduced the inner product and showed how to calculate it in an orthonormal basis
o introduced outer products and projection operators
o introduced tensor products and showed how to contruct state vectors for multiple qubits
!eblock

!bblock  We will repeat some of these topics today and discuss also 
o tensor products of Hilbert Spaces and definition of Computational Basis, partly repetition from last week
o quantum measurements are probabilistic
o the idea of wavefunction collapse as a result of measurement
o Quantum operations and special matrices
o Simple Hamiltonians and other operators
o First exercise set
!eblock

"Video of lecture":"https://youtu.be/ucXpNSISzOw"



===== Definition of Computational basis states, repetition from last week =====

# to do: make figures with examples of basis states, hydrogen like systems, harmonic oscillator
Assume we have a two-level system where the two states are represented
by the state vectors $\vert \phi_0\rangle$ and $\vert \phi_1\rangle$,
respectively. These states could represent selected or effective
degrees of freedom for either a single particle (fermion or boson) or
they could represent effective many-body degrees of freedon. In actual
realizations of quantum computing we search often for candidate
systems where we can use some low-lying states as computational basis
states. But we are not limited to quantum computing. When doing
many-body physics, due to the exploding degrees of freedom, we
normally search after effective ways by which we can reduce the
involved dimensionalities to a number of degrees of freedom we can
handle by a given many-body method.

# to add === Examples: Hydrogen like states and the harmonic oscillator in one, two and three dimensions ===


We will now relabel the above two states as two orthogonal and normalized basis (ONB) states 
!bt
\[
\vert \phi_0 \rangle = \vert 0 \rangle = \begin{bmatrix} 1 \\ 0 \end{bmatrix},
\]
!et
and 
!bt
\[
\vert \phi_1 \rangle = \vert 1 \rangle = \begin{bmatrix} 0 \\ 1 \end{bmatrix}.
\]
!et

It is straight forward to see that $\langle 1 \vert 0\rangle=0$. With
these two states we can define the define the identity operator
$\bm{I}$ as the sum of the outer products of these two states, namely

!bt
\[
\bm{I} = \sum_{i=0}^{i=1}\vert i\rangle \langle i\vert = \begin{bmatrix} 1 & 0 \\ 0 & 0 \end{bmatrix} +\begin{bmatrix} 0 & 0 \\ 0 & 1 \end{bmatrix}=\begin{bmatrix} 1 & 0 \\ 0 & 1 \end{bmatrix}.
\]
!et
We can further define the projection operators
!bt
\[
\bm{P} = \vert 0\rangle \langle 0\vert = \begin{bmatrix} 1 & 0 \\ 0 & 0 \end{bmatrix},
\]
!et
and 
!bt
\[
\bm{Q} = \vert 1\rangle \langle 1\vert = \begin{bmatrix} 0 & 0 \\ 0 & 1 \end{bmatrix}.
\]
!et

We note that $P^2=P$, $Q^2=Q$ (the operators are idempotent) and that
their determinants are zero, meaning in turn that we cannot use these
operators for unitary/orthogonal transformations. However, they play
important roles in defining effective Hilbert spaces for many-body
studies. Finally, before proceeding we note also that the two matrices
commute and we have $\bm{P}\bm{Q}=0$ and $\left[ \bm{P},\bm{Q}\right]=0$.




=== Superposition and more ===

Using the properties of ONBs we can expand a new state in terms of the
above states. These states could also form  a basis which is an
eigenbasis of a selected Hamiltonian (more of this below).

We define now a new state which is a linear expansion in terms of
these computational basis states

!bt
\[
\vert \psi \rangle = \alpha \vert 0 \rangle + \beta\vert 1 \rangle,
\]
!et

where the coefficients $\alpha = \langle 0 \vert \psi \rangle$ and
$\beta =\langle 1 \vert \psi\rangle$ reresent the overlaps between the
computational basis states and the state $\vert \psi\rangle$. In
quantum speech, we say the state is in a superposition of the states
$\vert 0\rangle$ and $\vert 1\rangle$.

Computing the inner product of $\vert \psi \rangle$ we obtain
!bt
\[
\langle \psi \vert \psi \rangle = \vert \alpha \vert ^2\langle 0\vert 0\rangle + \vert \beta \vert ^2\langle 1\vert 1\rangle = \vert \alpha \vert ^2 + \vert \beta \vert ^2 = 1,
\]
!et
since the new basis, which is defined in terms of a a
unitary/orthogonal transformation, preserves the orthogonality and
norm of the original computational basis $\vert 0\rangle$ and $\vert
1\rangle$. We demonstrate this below in our discussion on consider the
unitary transformations.

If we now act with the projection operators $\bm{P}$ and $\bm{Q}$ on
the state $\vert \psi\rangle$ we get

!bt
\[
\bm{P}\vert \psi \rangle = \vert 0 \rangle\langle 0\vert (\alpha \vert 0 \rangle + \beta\vert 1 \rangle)=\alpha \vert 0\rangle,
\]
!et

that is we _project_ out the $\vert 0\rangle$ component of the state
$\vert \psi\rangle$ with the coefficient $\alpha$ while $\bm{Q}$
projects out the $\vert 1\rangle$ component with coefficient $\beta$
as seen from

!bt
\[
\bm{Q}\vert \psi \rangle = \vert 1 \rangle\langle 1\vert (\alpha \vert 0 \rangle + \beta\vert 1 \rangle)=\beta \vert 1\rangle.
\]
!et

The above results can easily be derived by multiplying the pertinent
matrices with the vectors $\vert 0\rangle$ and $\vert 1\rangle$,
respectively.

Using the above linear expansion we can now define the density matrix of the state $\vert \psi\rangle$ as the outer product
!bt
\[
\bm{\rho}=\vert \psi \rangle\langle \psi \vert = \alpha\alpha^* \vert 0 \rangle\langle 0\vert+\alpha\beta^* \vert 0 \rangle\langle 1\vert+\beta\alpha^* \vert 1 \rangle\langle 0\vert+\beta\beta^* \vert 1 \rangle\langle 1\vert=\begin{bmatrix} \alpha\alpha^* & \alpha\beta^*\\ \beta\alpha^* & \beta\beta^*\end{bmatrix}.
\]
!et
Finally, we note that the trace of the density matrix is simply given by unity if the states are properly normalized
!bt
\[
\mathrm{tr}\bm{\rho}=\alpha\alpha^* +\beta\beta^*=1.
\]
!et




===== Tensor products and Composite systems =====

The state space of a composite physical system is the tensor product of the state spaces of the component systems.
There are two parts to this:
o Determining the basis for the composite system
o Determining the components of the state vector

Last week we introduced the $\vert 0\rangle$ and $\vert 1\rangle$ states as our basis states for a single qubit system.
We will now extend this to a two-qubit system.




Consider now two vectors with length $n=2$, with elements

!bt
\[
\bm{x}=\vert x \rangle = \begin{bmatrix} x_0 \\ x_1 \end{bmatrix}, 
\]
!et
and
!bt
\[
\bm{y}=\vert y \rangle = \begin{bmatrix} y_0 \\ y_1 \end{bmatrix}. 
\]
!et
The tensor product of these two vectors is defined as
!bt
\[
\vert x \rangle \otimes \vert y \rangle = \vert xy \rangle  = \begin{bmatrix} x_0y_0 \\ x_0y_1 \\ x_1y_0 \\ x_1y_1 \end{bmatrix}, 
\]
!et
which is now a vector of length $4$.

If we now go back to our original one-qubit basis states, we can form the following tensor products
!bt
\[
\vert 0 \rangle \otimes \vert 0 \rangle = \begin{bmatrix} 1 \\ 0\end{bmatrix} \otimes \begin{bmatrix} 1 \\ 0\end{bmatrix} =\begin{bmatrix} 1 \\ 0 \\ 0 \\ 0 \end{bmatrix}=\vert 00 \rangle, 
\]
!et
!bt
\[
\vert 0 \rangle \otimes \vert 1 \rangle = \begin{bmatrix} 1 \\ 0\end{bmatrix} \otimes \begin{bmatrix} 0 \\ 1\end{bmatrix} =\begin{bmatrix} 0 \\ 1 \\ 0 \\ 0 \end{bmatrix}=\vert 01 \rangle, 
\]
!et
!bt
\[
\vert 1 \rangle \otimes \vert 0 \rangle = \begin{bmatrix} 0 \\ 1\end{bmatrix} \otimes \begin{bmatrix} 1 \\ 0\end{bmatrix} =\begin{bmatrix} 0 \\ 0 \\ 1 \\ 0 \end{bmatrix}=\vert 10 \rangle, 
\]
!et
and finally
!bt
\[
\vert 1 \rangle \otimes \vert 1 \rangle = \begin{bmatrix} 0 \\ 1\end{bmatrix} \otimes \begin{bmatrix} 0 \\ 1\end{bmatrix} =\begin{bmatrix} 0 \\ 0 \\ 0 \\ 1 \end{bmatrix}=\vert 11 \rangle. 
\]
!et

We have now four different states and we could try to make a new list
by relabeling the states as follows $\vert 00 \rangle =\vert 0
\rangle$, $\vert 01 \rangle =\vert 1 \rangle$, $\vert 10 \rangle
=\vert 2 \rangle$, $\vert 11 \rangle =\vert 3 \rangle$.

In similar ways we can define the tensor product of three qubits (or single-particle states) as
!bt
\[
\vert 0 \rangle \otimes \vert 0 \rangle \otimes \vert 0 \rangle = \begin{bmatrix} 1 \\ 0\end{bmatrix} \otimes \begin{bmatrix} 1 \\ 0\end{bmatrix} \otimes \begin{bmatrix} 1 \\ 0\end{bmatrix}=\begin{bmatrix} 1 \\ 0 \\ 0 \\ 0 \\ 0 \\0 \\ 0 \\ 0\end{bmatrix}=\vert 000 \rangle, 
\]
!et
which is a new vector of length eight. We note that with a single-particle basis given by the states $\vert 0\rangle$ and $\vert 1\rangle$ we can, with $N$ particles construct $2^N$ different states.

In our discussions below, we will demonstrate how to generalize the
description of the basis states by writting efficient codes to
represent them.

The tensor product of two matrices are similar to those of two vectors. Here we show the
the tensor product of two $2\times 2$ matrices $\bm{A}$ and $\bm{B}$

!bt
\[
\bm{A} \times \bm{B} = \begin{bmatrix} a_{00} & a_{01} \\ a_{10} & a_{11} \end{bmatrix} \otimes \begin{bmatrix} b_{00} & b_{01} \\ b_{10} & b_{11} \end{bmatrix} =
\begin{bmatrix} a_{00} b_{00} &  a_{00}b_{01} & a_{01} b_{00} & a_{01}b_{01} \\
                a_{00} b_{10} &  a_{00}b_{11} & a_{01} b_{10} & a_{01}b_{11} \\
                a_{10} b_{00} &  a_{10}b_{01} & a_{11} b_{00} & a_{11}b_{01} \\
                a_{10} b_{10} &  a_{10}b_{11} & a_{11} b_{10} & a_{11}b_{11} \end{bmatrix}
\]
!et



===== Measurements =====

The probability of a measurement on a quantum system giving a certain
result is determined by the weight of the relevant basis state in the
state vector. After the measurement, the system is in a state that
corresponds to the result of the measurement. The operators and
gates discussed below are examples of operations we can perform on
specific states.


We  consider the state
!bt
\[
\vert \psi\rangle = \alpha \vert 0 \rangle +\beta \vert 1 \rangle
\]
!et

o A measurement can yield only one of the above states, either $\vert 0\rangle$ or $\vert 1\rangle$.
o The probability of a measurement resulting in $\vert 0\rangle$ is $\alpha^*\alpha = \vert \alpha \vert^2$.
o The probability of a measurement resulting in $\vert 1\rangle$ is $\beta^*\beta = \vert \beta \vert^2$.
o And we note that the sum of the outcomes gives $\alpha^*\alpha+\beta^*\beta=1$ since the two states are normalized.

After the measurement, the state of the system is the state associated with the result of the measurement.

We have already encountered the projection operators $P$ and $Q$. Let
us now look at other types of operations we can make on qubit states.

===== Different operators and gates =====

In quantum computing, the so-called Pauli matrices, and other simple
$2\times 2$ matrices, play an important role, ranging from the setup
of quantum gates to a rewrite of creation and annihilation operators
and other quantum mechanical operators. Let us start with the familiar
Pauli matrices and remind ourselves of some of their basic properties.

The Pauli matrices are defined as
!bt
\[
\sigma_x = \begin{bmatrix} 0 & 1 \\ 1 & 0 \end{bmatrix},
\]
!et
!bt
\[
\sigma_y = \begin{bmatrix} 0 & -\imath \\ \imath & 0 \end{bmatrix},
\]
!et
and
!bt
\[
\sigma_z = \begin{bmatrix} 1 & 0 \\ 0 & -1 \end{bmatrix}.
\]
!et

It is easy to show that the matrices obey the properties (being involutory)
!bt
\[
\sigma_x\sigma_x = \sigma_y\sigma_y=\sigma_z\sigma_z = I=\begin{bmatrix} 1 & 0 \\ 0 & 1\end{bmatrix},
\]
!et

that is their products with themselves result in the identity matrix
$\bm{I}$.  Furthermore, the Pauli matrices are unitary matrices
meaning that their inverses are equal to their hermitian conjugated
matrices. The determinants of the Pauli matrices are all equal to $-1$,
as can be easily verified.

The Pauli matrices obey also the following commutation rules
!bt
\[
\left[\sigma_x,\sigma_y\right] = 2\imath \sigma_z.
\]
!et

Before we proceed with other matrices and how they can be used to
operate on various quantum mechanical states, let us try apply these matrices to our one-qubit states.

Assume we operate with $\sigma_x$ on our basis state $\vert 0 \rangle$. This gives
!bt
\[
\begin{bmatrix} 0 & 1 \\ 1 & 0 \end{bmatrix}\begin{bmatrix} 1 \\ 0 \end{bmatrix}=\begin{bmatrix} 0  \\ 1  \end{bmatrix},
\]
!et
that is we switch from $\vert 0\rangle$ to $\vert 1\rangle$ (often called a spin flip operation) and similary we have
!bt
\[
\begin{bmatrix} 0 & 1 \\ 1 & 0 \end{bmatrix}\begin{bmatrix} 0 \\ 1 \end{bmatrix}=\begin{bmatrix} 1  \\ 0  \end{bmatrix}.
\]
!et

This matrix plays an important role in quantum computing since we can
link this with the classical _NOT_ operation.  If we send in bit 0,
the _NOT_ gate outputs bit 1 and vice versa. We can use the $\sigma_x$
matrix to implement the quantum mechanical equivalent of a classical
_NOT_ gate. If we input what we could represent as bit 0 in terms of
the basis state $\vert 0\rangle$, operating on this state results in
the state $\vert 1\rangle$, which we in turn can interpret as the
classical bit 1.


If we have a linear superposition of these states we obtain
!bt
\[
\begin{bmatrix}0 & 1 \\ 1 & 0 \end{bmatrix}\begin{bmatrix}\alpha \\ \beta \end{bmatrix}=\begin{bmatrix}\beta \\ \alpha \end{bmatrix}.
\]
!et

The $\sigma_y$ matrix introduces an imaginary sign, which we will later encounter in terms of so-called phase-shift operations.

The $\sigma_z$ matrix has the following effect
!bt
\[
\begin{bmatrix} 1 & 0 \\ 0 & -1 \end{bmatrix}\begin{bmatrix} 1 \\ 0 \end{bmatrix}=\begin{bmatrix} 1  \\ 0  \end{bmatrix},
\]
!et
and 
!bt
\[
\begin{bmatrix} 1 & 0 \\ 0 & -1 \end{bmatrix}\begin{bmatrix} 0 \\ 1 \end{bmatrix}=\begin{bmatrix} 0  \\ -1  \end{bmatrix},
\]
!et
which we will also link with a specific phase-shift.


=== Other important matrices ===

We end with presenting other operators (as matrices) which play an important role in quantum computing, the so-called Hadamard matrix (or gate as we will use later)
!bt
\[
\bm{H}=\frac{1}{\sqrt{2}}\begin{bmatrix} 1 & 1 \\ 1 & -1\end{bmatrix}.
\]
!et

The action of the operator $\bm{H}$ on a computational basis state like $\vert 0\rangle$ gives
!bt
\[
\bm{H}\vert 0 \rangle = \frac{1}{\sqrt{2}}\begin{bmatrix} 1 & 1 \\ 1 & -1\end{bmatrix}\begin{bmatrix} 1 \\ 0\end{bmatrix}=\frac{1}{\sqrt{2}}(\vert 0\rangle + \vert 1\rangle),
\]
!et
and 

!bt
\[
\bm{H}\vert 1 \rangle = \frac{1}{\sqrt{2}}\begin{bmatrix} 1 & 1 \\ 1 & -1\end{bmatrix}\begin{bmatrix} 0 \\ 1\end{bmatrix}=\frac{1}{\sqrt{2}}(\vert 0\rangle - \vert 1\rangle),
\]
!et
that is we create a superposition of the states $\vert 0\rangle$ and $\vert 1\rangle$.

Another famous operation is the phase matrix given by
!bt
\[
\bm{S} = \begin{bmatrix} 1 & 0 \\ 0 & \imath\end{bmatrix}.
\]
!et

	

===== Unitarity =====

The matrices we introduced here are so-called unitary matrices. This
is an important element in quantum mechanics since the evolution of a
closed quantum system is described by operations involving unitary
operations only.

We have defined a new state $\vert \psi_p\rangle$ as a linear expansion in terms of an orthogonal and normalized basis (our computational basis) $\phi_{\lambda}$
!bt
\begin{equation}
\vert \psi_i\rangle = \sum_{j} u_{ij}\vert \phi_{j}\rangle.
\end{equation}
!et


It is normal to choose a basis defined as the eigenfunctions of parts
of the full Hamiltonian. The typical situation consists of the
solutions of the one-body part of the Hamiltonian, that is we have

!bt
\[
\hat{h}_0\vert \phi_{i}\rangle=\epsilon_{i}\vert \phi_{i}\rangle.
\]
!et 

This is normally referred to as a single-particle basis $\vert\phi_{i}(\mathbf{r})\rangle$,
defined by the quantum numbers $i$ and $\mathbf{r}$.


A unitary transformation is important since it keeps the orthogonality.
To see this consider first a basis of vectors $\mathbf{v}_i$,
!bt
\[
\mathbf{v}_i = \begin{bmatrix} v_{i1} \\ \dots \\ \dots \\v_{in} \end{bmatrix}
\]
!et
We assume that the basis is orthogonal, that is 
!bt
\[
\mathbf{v}_j^T\mathbf{v}_i = \delta_{ij}.
\]
!et
An orthogonal or unitary transformation
!bt
\[
\mathbf{w}_i=\mathbf{U}\mathbf{v}_i,
\]
!et
preserves the dot product and orthogonality since
!bt
\[
\mathbf{w}_j^T\mathbf{w}_i=(\mathbf{U}\mathbf{v}_j)^T\mathbf{U}\mathbf{v}_i=\mathbf{v}_j^T\mathbf{U}^T\mathbf{U}\mathbf{v}_i= \mathbf{v}_j^T\mathbf{v}_i = \delta_{ij}.
\]
!et

This means that if the coefficients $u_{p\lambda}$ belong to a unitary
or orthogonal transformation (using the Dirac bra-ket notation)

!bt
\[
\vert \psi_i\rangle = \sum_{j} u_{ij}\vert \phi_{j}\rangle.
\]
!et

orthogonality is preserved.

This propertry is extremely useful when we build up a basis of
many-body determinant based states.

_Note also that although a basis $\left\{\vert \phi_i \rangle\right\}$ contains an infinity of states, for practical calculations we have always to make some truncations._ 

=== Example ===

Assume we have two one-qubit states represented by
!bt
\[
\vert \psi \rangle = \alpha \vert 0 \rangle + \beta \vert 1\rangle=\begin{bmatrix}\alpha \\ \beta \end{bmatrix},
\]
!et
and
!bt
\[
\vert \phi \rangle = \gamma \vert 0 \rangle + \delta \vert 1\rangle=\begin{bmatrix}\gamma \\ \delta \end{bmatrix}.
\]
!et

We assume that the state $\vert \phi \rangle$ is obtained through a
unitary transformation of $\vert \psi \rangle$ through a matrix
$\bm{U}$ with its hermitian conjugate $\bm{U}^{\dagger}$ with matrix
elements $u_{ij}^{\dagger}=u_{ji}^*$ and
$\bm{I}=\bm{U}\bm{U}^{\dagger}=\bm{U}^{\dagger}\bm{U}$.

Note that this means that the hermitian conjugate of a unitary matrix
is equal to its inverse. This has important consequences for what is
called reversibility. We say quantum mechanics is a theory which is
reversible with a probabilistic determinism. Classical mechanics on
the other is reversible in a deterministic way, that is, knowing all
initial conditions we can in principle determine the future motion of
an object which obey the laws of motion of classical mechanics.

We have then
!bt
\[
\begin{bmatrix}\gamma \\ \delta \end{bmatrix}=\begin{bmatrix}u_{00} & u_{01} \\ u_{10} & u_{11} \end{bmatrix}\begin{bmatrix}\alpha \\ \beta \end{bmatrix}.
\]
!et

Since our original basis $\vert \psi\rangle$ is orthogonal and normalized with $\vert\alpha\vert^2+\vert\beta\vert^2=1$, the new basis is also orthogonal and normalized, as we can see below here.

Since the inverse of a hermitian matrix is equal to its hermitian
conjugate/adjoint), unitary transformations are always reversible.

Why are only unitary transformations allowed? The key lies in the way the inner product tranforms.

To see this we rewrite the new basis from the previous example in its two components as
!bt
\[
\vert \phi\rangle_i=\sum_{j}u_{ij}\vert \psi\rangle_j,
\]
!et
or in terms of a matrix-vector notatio we have
!bt
\[
\vert \phi\rangle=\bm{U}\vert \psi\rangle,
\]
!et

We have already assumed that $\langle \psi \vert \psi \rangle = \vert\alpha\vert^2+\vert\beta\vert^2=1$.

We have that 
!bt
\[
\langle \phi\vert_i=\sum_{j}u_{ij}^*\langle \psi\vert_j,
\]
!et
or in terms of a matrix-vector notation we have
!bt
\[
\langle \phi\vert=\langle \psi\vert\bm{U}^{\dagger}.
\]
!et

Note that the two vectors are row vectors now.

If we stay with this notation we have

!bt
\[
\langle \phi\vert\phi\rangle = \langle \psi \bm{U}^{\dagger}\bm{U}\vert \psi\rangle = \langle \psi\vert \psi\rangle=1!
\]
!et

Unitary transformations are rotations in state space which preserve the
length (the square root of the inner product) of the state vector.



===== Representation of states and Hamiltonians =====


Before we proceed we need several other definitions.  Throughout these
lectures we will assume that the interacting part of the Hamiltonian
can be approximated by a two-body interaction.  This means that our
Hamiltonian can be written as the sum of a onebody part, which
includes kinetic energy and an eventual external field, and a twobody
interaction




!bt
\begin{equation}
    \hat{H} = \hat{H}_0 + \hat{H}_I 
    = \sum_{i=1}^N \hat{h}_0(x_i) + \sum_{i < j}^N \hat{v}(r_{ij}),
\end{equation}
!et
with 
!bt
\begin{equation}
  H_0=\sum_{i=1}^N \hat{h}_0(x_i).
label{hinuclei}
\end{equation}
!et

The onebody part $u_{\mathrm{ext}}(x_i)$ is normally approximated by a
harmonic oscillator potential or the Coulomb interaction an electron
feels from the nucleus. However, other potentials are fully possible,
such as one derived from the self-consistent solution of the
Hartree-Fock equations.



Our Hamiltonian is invariant under the permutation (interchange) of
two particles.  Since we deal with fermions however, the total wave
function is antisymmetric.  Let $\hat{P}$ be an operator which
interchanges two particles.  Due to the symmetries we have ascribed to
our Hamiltonian, this operator commutes with the total Hamiltonian,

!bt 
\[
[\hat{H},\hat{P}] = 0,
 \]
!et
meaning that $\Psi_{\lambda}(x_1, x_2, \dots , x_N)$ is an eigenfunction of 
$\hat{P}$ as well, that is
!bt 
\[
\hat{P}_{ij}\Psi_{\lambda}(x_1, x_2, \dots,x_i,\dots,x_j,\dots,x_N)=
\beta\Psi_{\lambda}(x_1, x_2, \dots,x_i,\dots,x_j,\dots,x_N),
\]
!et
where $\beta$ is the eigenvalue of $\hat{P}$. We have introduced the suffix $ij$ in order to indicate that we permute particles $i$ and $j$. The variable $N$ refers to the number of particles.
The Pauli principle tells us that the total wave function for a system of fermions
has to be antisymmetric, resulting in the eigenvalue $\beta = -1$.   The variable $N$ represents the number of particles.


If we deal with fermions, we assume that  we can approximate the exact eigenfunction with a Slater determinant
!bt
\begin{equation}
   \Phi(x_1, x_2,\dots ,x_N,\alpha,\beta,\dots, \sigma)=\frac{1}{\sqrt{N!}}
\left| \begin{array}{ccccc} \psi_{\alpha}(x_1)& \psi_{\alpha}(x_2)& \dots & \dots & \psi_{\alpha}(x_N)\\
                            \psi_{\beta}(x_1)&\psi_{\beta}(x_2)& \dots & \dots & \psi_{\beta}(x_N)\\  
                            \dots & \dots & \dots & \dots & \dots \\
                            \dots & \dots & \dots & \dots & \dots \\
                     \psi_{\sigma}(x_1)&\psi_{\sigma}(x_2)& \dots & \dots & \psi_{\sigma}(x_N)\end{array} \right|, label{eq:HartreeFockDet}
\end{equation}
!et
where  $x_i$  stand for the coordinates and spin values of a particle $i$ and $\alpha,\beta,\dots, \gamma$ 
are quantum numbers needed to describe remaining quantum numbers.  
This ansatz for the computational basis is often based on single-particle functions which are eigenfunctions of a part of the total Hamiltonian. Most frequently, these single-particle basis functions are eigenpairs of the non-interacting part of the Hamiltonian (normally defined by kinetic and external potential operators).




For Fermions (identical and indistinguishable particles) we will 
form an ansatz for a given state in terms of so-called Slater determinants determined
by a chosen basis of single-particle functions. 

For a given $n\times n$ matrix $\mathbf{A}$ we can write its determinant
!bt
\[
   det(\mathbf{A})=|\mathbf{A}|=
\left| \begin{array}{ccccc} a_{11}& a_{12}& \dots & \dots & a_{1n}\\
                            a_{21}&a_{22}& \dots & \dots & a_{2n}\\  
                            \dots & \dots & \dots & \dots & \dots \\
                            \dots & \dots & \dots & \dots & \dots \\
                            a_{n1}& a_{n2}& \dots & \dots & a_{nn}\end{array} \right|,
\]
!et
in a more compact form as 
!bt
\[
|\mathbf{A}|= \sum_{i=1}^{n!}(-1)^{p_i}\hat{P}_i a_{11}a_{22}\dots a_{nn},
\]
!et
where $\hat{P}_i$ is a permutation operator which permutes the column indices $1,2,3,\dots,n$
and the sum runs over all $n!$ permutations.  The quantity $p_i$ represents the number of transpositions of column indices that are needed in order to bring a given permutation back to its initial ordering, in our case given by $a_{11}a_{22}\dots a_{nn}$ here.




A simple $2\times 2$ determinant illustrates this. We have
!bt
\[
   det(\mathbf{A})=
\left| \begin{array}{cc} a_{11}& a_{12}\\
                            a_{21}&a_{22}\end{array} \right|= (-1)^0a_{11}a_{22}+(-1)^1a_{12}a_{21},
\]
!et

where in the last term we have interchanged the column indices $1$ and
$2$. The natural ordering we have chosen is $a_{11}a_{22}$.




We define our new single-particle basis (this is a normal approach for
Hartree-Fock theory) by performing a unitary transformation on our
previous basis (labelled with greek indices) as
!bt
\[
\vert \psi\rangle_i  = \sum_{j} u_{ij}\vert \phi\rangle_j. 
\]
!et
If the basis has infinitely many solutions, we need to truncate the
above sum.  We assume that the basis $\vert\phi\rangle_j$ is
orthogonal.

If we stay with determinants, a feature which will become useful is to
expand a new determinant in terms of a previous one that is defined by
a given set of single-particle state functions.  As discussed above,
we can define a new basis that is a linear combination of another
basis (assumed to be orthogonal and normalized).  This means that if
the coefficients $u_{ij}$ belong to a unitary or orthogonal
orthogonality is preserved, as discussed above.

This propertry is extremely useful when we build up a basis of many-body Stater determinant based states. 

Let us now for simplicity drop our references to quantum mechanical basis states.
Consider the following determinant
!bt
\[
\left| \begin{array}{cc} \alpha_1b_{11}+\alpha_2sb_{12}& a_{12}\\
                         \alpha_1b_{21}+\alpha_2b_{22}&a_{22}\end{array} \right|=\alpha_1\left|\begin{array}{cc} b_{11}& a_{12}\\
                         b_{21}&a_{22}\end{array} \right|+\alpha_2\left| \begin{array}{cc} b_{12}& a_{12}\\b_{22}&a_{22}\end{array} \right|
\]
!et


We can generalize this to  an $n\times n$ matrix and have 
!bt
\[
\left| \begin{array}{cccccc} a_{11}& a_{12} & \dots & \sum_{k=1}^n c_k b_{1k} &\dots & a_{1n}\\
a_{21}& a_{22} & \dots & \sum_{k=1}^n c_k b_{2k} &\dots & a_{2n}\\
\dots & \dots & \dots & \dots & \dots & \dots \\
\dots & \dots & \dots & \dots & \dots & \dots \\
a_{n1}& a_{n2} & \dots & \sum_{k=1}^n c_k b_{nk} &\dots & a_{nn}\end{array} \right|=
\sum_{k=1}^n c_k\left| \begin{array}{cccccc} a_{11}& a_{12} & \dots &  b_{1k} &\dots & a_{1n}\\
a_{21}& a_{22} & \dots &  b_{2k} &\dots & a_{2n}\\
\dots & \dots & \dots & \dots & \dots & \dots\\
\dots & \dots & \dots & \dots & \dots & \dots\\
a_{n1}& a_{n2} & \dots &  b_{nk} &\dots & a_{nn}\end{array} \right| .
\]
!et
This is a property we will use in our discussions of different many-body methods in later chapters. 




We can generalize the previous results, now 
with all elements $a_{ij}$  being given as functions of 
linear combinations  of various coefficients $c_{ij}$ and $b_{ij}$,
!bt
\[
\left| \begin{array}{cccccc} \sum_{k=1}^n b_{1k}c_{k1}& \sum_{k=1}^n b_{1k}c_{k2} & \dots & \sum_{k=1}^n b_{1k}c_{kj}  &\dots & \sum_{k=1}^n b_{1k}c_{kn}\\
\sum_{k=1}^n b_{2k}c_{k1}& \sum_{k=1}^n b_{2k}c_{k2} & \dots & \sum_{k=1}^n b_{2k}c_{kj} &\dots & \sum_{k=1}^n b_{2k}c_{kn}\\
\dots & \dots & \dots & \dots & \dots & \dots \\
\dots & \dots & \dots & \dots & \dots &\dots \\
\sum_{k=1}^n b_{nk}c_{k1}& \sum_{k=1}^n b_{nk}c_{k2} & \dots & \sum_{k=1}^n b_{nk}c_{kj} &\dots & \sum_{k=1}^n b_{nk}c_{kn}\end{array} \right|=det(\mathbf{C})det(\mathbf{B}),
\]
!et
where $det(\mathbf{C})$ and $det(\mathbf{B})$ are the determinants of $n\times n$ matrices
with elements $c_{ij}$ and $b_{ij}$ respectively.  
This is a property we will use in our Hartree-Fock discussions. Convince yourself about the correctness of the above expression by setting $n=2$. 






With our definition of the new basis in terms of an orthogonal basis we have (dropping the bra-ket notation)
!bt
\[
\psi_p(x)  = \sum_{\lambda} u_{p\lambda}\phi_{\lambda}(x).
\]
!et
If the coefficients $u_{p\lambda}$ belong to an orthogonal or unitary matrix, the new basis
is also orthogonal. 
Our Slater determinant in the new basis $\psi_p(x)$ is written as
!bt
\[
\frac{1}{\sqrt{N!}}
\left| \begin{array}{ccccc} \psi_{p}(x_1)& \psi_{p}(x_2)& \dots & \dots & \psi_{p}(x_N)\\
                            \psi_{q}(x_1)&\psi_{q}(x_2)& \dots & \dots & \psi_{q}(x_N)\\  
                            \dots & \dots & \dots & \dots & \dots \\
                            \dots & \dots & \dots & \dots & \dots \\
                     \psi_{t}(x_1)&\psi_{t}(x_2)& \dots & \dots & \psi_{t}(x_N)\end{array} \right|=\frac{1}{\sqrt{N!}}
\left| \begin{array}{ccccc} \sum_{\lambda} u_{p\lambda}\phi_{\lambda}(x_1)& \sum_{\lambda} u_{p\lambda}\phi_{\lambda}(x_2)& \dots & \dots & \sum_{\lambda} u_{p\lambda}\phi_{\lambda}(x_N)\\
                            \sum_{\lambda} u_{q\lambda}\phi_{\lambda}(x_1)&\sum_{\lambda} u_{q\lambda}\phi_{\lambda}(x_2)& \dots & \dots & \sum_{\lambda} u_{q\lambda}\phi_{\lambda}(x_N)\\  
                            \dots & \dots & \dots & \dots & \dots \\
                            \dots & \dots & \dots & \dots & \dots \\
                     \sum_{\lambda} u_{t\lambda}\phi_{\lambda}(x_1)&\sum_{\lambda} u_{t\lambda}\phi_{\lambda}(x_2)& \dots & \dots & \sum_{\lambda} u_{t\lambda}\phi_{\lambda}(x_N)\end{array} \right|,
\]
!et
which is nothing but $det(\mathbf{C})det(\Phi)$, with $det(\Phi)$ being the determinant given by the basis functions $\phi_{\lambda}(x)$. 


===== Simple  Hamiltonian models =====



In order to study get started with coding, we will study two simple Hamiltonian systems, one which we can use for a single qubit systems and one which has as basis functions a two-qubit system. These two simple Hamiltonians exhibit also something which is called level crossing, a feature which we will use in later studies of entanglement.

We study first a simple two-level system. Thereafter we
extend our model to a four-level system which can be
interpreted as composed of two separate (not necesseraly identical)
subsystems.

We let our hamiltonian depend linearly on a strength parameter $z$

!bt
\[
       H=H_0+\lambda H_\mathrm{I},
\]
!et

with $\lambda \in [0,1]$, where the limits $\lambda=0$ and $\lambda=1$
represent the non-interacting (or unperturbed) and fully interacting
system, respectively.  The model is an eigenvalue problem with only
two available states, which we label $\vert 0\rangle$ and $\vert
1\rangle$, respectively. Below we will let state $\vert 0 \rangle$
represent the lowest state (often referred to as model-space state)
with its pertinent eigenvalue and eigenvector whereas state $\vert 1\rangle$ represents the eigenvalue of
the excluded space.  The non-interacting solutions to our problem are

!bt
\begin{equation}
       H_0\vert 0 \rangle =\epsilon_0\vert 0 \rangle,
\end{equation}
!et
and
!bt
\begin{equation}
       H_0\vert 1\rangle =\epsilon_1\vert 1\rangle,
\end{equation}
!et

with $\epsilon_0 < \epsilon_1$. We label the off-diagonal matrix
elements $X$, while $X_0=\langle 0 \vert H_I\vert 0 \rangle$ and
$X_1=\langle 1 \vert H_1\vert 1 \rangle$.  The exact eigenvalue
problem

!bt
label{eq:twolevelH}
\begin{equation}
\left(\begin{array}{cc}\epsilon_0+\lambda X_0 &\lambda X \\
\lambda X &\epsilon_1+\lambda X_1 \end{array}\right)
\end{equation}
!et
yields
!bt
\begin{eqnarray}
     label{eq:exact}
     E(\lambda)=&\frac{1}{2}\left\{\epsilon_0 +\epsilon_1 +\lambda X_0
     +\lambda X_1 \pm \left(
     \epsilon_1 -\epsilon_0 +\lambda X_1-\lambda X_0\right) \right. \\ \nonumber
     & \left. \times\sqrt{1+\frac{4\lambda^2X^2}{\left(
     \epsilon_1 -\epsilon_0 +\lambda X_1-\lambda X_0\right)^2}}
     \right\}.
\end{eqnarray}
!et

In the results below we set the parameters $\epsilon_0=0$,
$\epsilon_1=4$, $X_0=-X_1=3$ and $X=0.2$.  This eigenvalue problem can
easily be rewritten in terms of the standard Pauli matrices.  The
non-interacting solutions represent our computational basis.
Pertinent to our choice of parameters, is that at $\lambda\geq 2/3$,
the lowest eigenstate is dominated by $\vert 1\rangle$ while the upper
is $\vert 0 \rangle$. At $\lambda=1$ the $\vert 0 \rangle$ mixing of
the lowest eigenvalue is $1\%$ while for $\lambda\leq 2/3$ we have a
$\vert 0 \rangle$ component of more than $90\%$.  The character of the
eigenvectors has therefore been interchanged when passing $z=2/3$. The
value of the parameter $X$ represents the strength of the coupling
between the model space and the excluded space.  The following code
computes and plots the eigenvalues.

!bc pycod
%matplotlib inline

from  matplotlib import pyplot as plt
import numpy as np
dim = 2
#Setting up a tridiagonal matrix and finding eigenvectors and eigenvalues
Hamiltonian = np.zeros((dim,dim))
#number of lambda values
n = 100
lmbd = np.linspace(0.,1.0,n)
e0 = 0.0
e1 = 4.0
X = 0.20
Xp = 3.0
Eigenvalue = np.zeros((dim,n))
for i in range(n): 
    Hamiltonian[0,0] = lmbd[i]*Xp+e0
    Hamiltonian[0,1] = lmbd[i]*X
    Hamiltonian[1,0] = Hamiltonian[0,1]
    Hamiltonian[1,1] = e1+lmbd[i]*(-Xp)
    # diagonalize and obtain eigenvalues, not necessarily sorted
    EigValues, EigVectors = np.linalg.eig(Hamiltonian)
    # sort eigenvectors and eigenvalues
    permute = EigValues.argsort()
    EigValues = EigValues[permute]
    EigVectors = EigVectors[:,permute]
    Eigenvalue[0,i] = EigValues[0]
    Eigenvalue[1,i] = EigValues[1]
plt.plot(lmbd, Eigenvalue[0,:] ,'b-',lmbd, Eigenvalue[1,:],'g-',)
plt.xlabel('$\lambda$')
plt.ylabel('Eigenvalues')
plt.show()
!ec


This model exhibits a simple level crossing where the
composition of the final interacting states change character as we
gradually switch on the interaction.



We extend the simple two-level system to a four level
system. This system can be thought of as composed of two subsystems
$A$ and $B$. Each subsystem has computational basis states

!bt
\[
\vert 0\rangle_{\mathrm{A,B}}=\begin{bmatrix} 1 & 0\end{bmatrix}^T \hspace{1cm} \vert 1\rangle_{\mathrm{A,B}}=\begin{bmatrix} 0 & 1\end{bmatrix}^T.
\]
!et
The subsystems could represent single particles or composite many-particle systems of a given symmetry.
This leads to the many-body computational basis states

!bt
\[
\vert 00\rangle = \vert 0\rangle_{\mathrm{A}}\otimes \vert 0\rangle_{\mathrm{B}}=\begin{bmatrix} 1 & 0 & 0 &0\end{bmatrix}^T,
\]
!et
and
!bt
\[
\vert 10\rangle = \vert 1\rangle_{\mathrm{A}}\otimes \vert 0\rangle_{\mathrm{B}}=\begin{bmatrix} 0 & 1 & 0 &0\end{bmatrix}^T,
\]
!et
and
!bt
\[
\vert 01\rangle = \vert 0\rangle_{\mathrm{A}}\otimes \vert 1\rangle_{\mathrm{B}}=\begin{bmatrix} 0 & 0 & 1 &0\end{bmatrix}^T,
\]
!et
and finally
!bt
\[
\vert 11\rangle = \vert 1\rangle_{\mathrm{A}}\otimes \vert 1\rangle_{\mathrm{B}}=\begin{bmatrix} 0 & 0 & 0 &1\end{bmatrix}^T.
\]
!et

These computational basis states define also the eigenstates of the non-interacting  Hamiltonian
!bt
\[
H_0\vert 00 \rangle = \epsilon_{00}\vert 00 \rangle,
\]
!et
!bt
\[
H_0\vert 10 \rangle = \epsilon_{10}\vert 10 \rangle,
\]
!et
!bt
\[
H_0\vert 01 \rangle = \epsilon_{01}\vert 01 \rangle,
\]
!et
and
!bt
\[
H_0\vert 11 \rangle = \epsilon_{11}\vert 11 \rangle.
\]
!et
The interacting part of the Hamiltonian $H_{\mathrm{I}}$ is given by the tensor product of two $\sigma_x$ and $\sigma_z$  matrices, respectively, that is
!bt
\[
H_{\mathrm{I}}=H_x\sigma_x\otimes\sigma_x+H_z\sigma_z\otimes\sigma_z,
\]
!et
where $H_x$ and $H_z$ are interaction strength parameters. Our final Hamiltonian matrix is given by
!bt
\[
\bm{H}=\begin{bmatrix} \epsilon_{00}+H_z & 0 & 0 & H_x \\
                       0  & \epsilon_{10}-H_z & H_x & 0 \\
		       0 & H_x & \epsilon_{01}-H_z & 0 \\
		       H_x & 0 & 0 & \epsilon_{11} +H_z \end{bmatrix}.
\] 
!et

The four eigenstates of the above Hamiltonian matrix can in turn be used to
define density matrices. As an example, the density matrix of the
first eigenstate (lowest energy $E_0$) $\Psi_0$ is

!bt
\[
\rho_0=\left(\alpha_{00}\vert 00 \rangle\langle 00\vert+\alpha_{10}\vert 10 \rangle\langle 10\vert+\alpha_{01}\vert 01 \rangle\langle 01\vert+\alpha_{11}\vert 11 \rangle\langle 11\vert\right),
\]
!et

where the coefficients $\alpha_{ij}$ are the eigenvector coefficients
resulting from the solution of the above eigenvalue problem.


!bc pycod
%matplotlib inline
from  matplotlib import pyplot as plt
import numpy as np
from scipy.linalg import logm, expm
def log2M(a): # base 2 matrix logarithm
    return logm(a)/np.log(2.0)

dim = 4
Hamiltonian = np.zeros((dim,dim))
#number of lambda values
n = 40
lmbd = np.linspace(0.0,1.0,n)
Hx = 2.0
Hz = 3.0
# Non-diagonal part as sigma_x tensor product with sigma_x
sx = np.matrix([[0,1],[1,0]])
sx2 = Hx*np.kron(sx, sx)
# Diagonal part as sigma_z tensor product with sigma_z
sz = np.matrix([[1,0],[0,-1]])
sz2 = Hz*np.kron(sz, sz)
noninteracting = [0.0, 2.5, 6.5, 7.0]
D = np.diag(noninteracting)
Eigenvalue = np.zeros((dim,n))

for i in range(n): 
    Hamiltonian = lmbd[i]*(sx2+sz2)+D
    # diagonalize and obtain eigenvalues, not necessarily sorted
    EigValues, EigVectors = np.linalg.eig(Hamiltonian)
    # sort eigenvectors and eigenvalues
    permute = EigValues.argsort()
    EigValues = EigValues[permute]
    EigVectors = EigVectors[:,permute]
    # Compute density matrix for selected system state, here ground state
    DensityMatrix = np.zeros((dim,dim))
    DensityMatrix = np.outer(EigVectors[:,0],EigVectors[:,0])
    # Plotting eigenvalues 
    Eigenvalue[0,i] = EigValues[0]
    Eigenvalue[1,i] = EigValues[1]
    Eigenvalue[2,i] = EigValues[2]
    Eigenvalue[3,i] = EigValues[3]
plt.plot(lmbd, Eigenvalue[0,:] ,'b-',lmbd, Eigenvalue[1,:],'g-',)
plt.plot(lmbd, Eigenvalue[2,:] ,'r-',lmbd, Eigenvalue[3,:],'y-',)
plt.xlabel('$\lambda$')
plt.ylabel('Eigenvalues')
plt.show()
!ec



=== First exercise ===

The exercises we present each week are meant to build the basis for
the two projects we will work on during the semester.  The first
project deals with implementing the so-called _Phase Estimation_ and
_Variational Quantum Eigensolver_ algorithms for finding the eigenvalues and eigenvectors of selected Hamiltonians.
Feel free to use the above codes in order to get started.

o Write a function which sets up a one-qubit basis and apply the various Pauli matrices to these basis states.
o Apply the Hadamard and Phase gates to the same one-qubit basis states and study their actions on these states.
o Rewrite the Hamiltonian of Eq.~(ref{eq:twolevelH}) in terms of the Pauli $x$ and $z$ matrices and find the two eigenvalues as function of the interaction strength $\lambda$.
o Study the behavior of these eigenstates as functions of the interaction strength $\lambda$.
o Using the one-qubit basis write a code which sets up a two-qubit basis and encodes this basis.
o Use the Hamiltonian for the two-qubit example to find the eigenpairs as functions of the interaction strength $\lambda$ and study the final eigenvectors as functions of the admixture of the original basis states. 


===== The next lecture =====

!bblock In our next lecture, we will discuss
o how much information is stored in a qubit
o show how to make measurements on composite states
o Density matrices and Entropy
o Schmidt decomposition and entanglement
Chapter 4 of Scherer's text contains useful discussions of several of these topics.
!eblock

#===== Appendix: unitary transformations and ways to solve the Schroedinger equation =====

To be added.
